<#@ include file="Settings.ttinclude" #>
// --------------------------------
// <copyright file="<#= Path.GetFileName(Host.TemplateFile) #>" company="Thuzi, LLC">
//     Copyright (c) 2010 Thuzi, LLC (thuzi.com)
// </copyright>
// <author>Nathan Totten (ntotten.com) and Jim Zimmerman (jimzimmerman.com)</author>
// <license>Released under the terms of the Microsoft Public License (Ms-PL)</license>
// <website>http://facebooksdk.codeplex.com</website>
// <autogenerated>
//   This file was generated using <#= Path.GetFileName(Host.TemplateFile) #>.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
// ---------------------------------

<#@ import namespace="OpenQA.Selenium" #> 
<#@ import namespace="WebDriver.HtmlUnit" #> 
<#@ import namespace="System.Collections.Generic" #> 

using System;
using System.Collections.ObjectModel; 
using System.Data.Linq.Mapping;
using System.ComponentModel.DataAnnotations;

<# 
var objs =  GetObjects(); 
#>

namespace <#=Namespace #>.Graph {

<# foreach (var obj in objs) {#>

	[Table(Name = "<#= obj.Name #>")]
	public partial class Graph<#=obj.ProperName#> {

<# foreach(var prop in obj.Properties) { #>

		/// <summary>
	<# WriteCodeComments(prop.Description); #>
		/// </summary>
<# if (obj.PublishProps.SingleOrDefault(p => p.Name == prop.Name) != null) {
	WriteLine("\t\t[Required]");
}#>
		[Column(Name = "<#= prop.Name #>")]
		public <#=prop.Type#> <#=ToProperName(prop.Name, obj.ProperName)#> { get; set; }

<#}#> 
	}
	
	public partial class <#=obj.ProperName#>GraphService : GraphService<Graph<#=obj.ProperName  #>> {	

<# foreach(var connection in obj.Connections) { 
	if (connection.Name != "picture") {
	#>

		/// <summary>
	<# WriteCodeComments(connection.Description); #>
		/// </summary>
<# if (IsCollectionConnection(connection.Name)) { #>
		public Collection<<#=GetConnectionReturnType(connection.Name)#>> Get<#=ToProperName(connection.Name, makeSinglular: false)#>(<#=obj.ProperName == "User" ? "long" : "string"#> id) {
			return GetConnectionItems<<#=GetConnectionReturnType(connection.Name)#>>("<#=CleanName(connection.Name)#>", id);
<# } else { #>
		public <#=GetConnectionReturnType(connection.Name)#> Get<#=ToProperName(connection.Name, makeSinglular: false)#>(<#=obj.ProperName == "User" ? "long" : "string"#> id) {
			return GetConnectionItem<<#=GetConnectionReturnType(connection.Name)#>>("<#=CleanName(connection.Name)#>", id);
<# } #>
		}

<#} }#>		
		
	}

<#}#>
}

<#+
 private IWebDriver _driver;

	public string GetConnectionReturnType(string connectionName) {
		string properName = ToProperName(connectionName);
		switch(properName) {
			case "Comment":
			case "Feed":
			case "Home":
			case "Tagged":
				properName = "Post";
				break;
			case "Outbox":
			case "Inbox":
			case "Update":
				properName = "MailMessage";
				break;
			case "Like":
			case "Movie":
			case "Music":
			case "Interest":
			case "Activity":
			case "Book":
			case "Television":
			case "Account":
				return "NameCategoryIdItem";
			case "Invited":
			case "Declined":
			case "Maybe":
			case "Attending":
			case "Noreply":
			case "Friend":
			case "Member":
			case "Platformrequest":
				return "NameIdItem";
				
		}
		return "Graph" + properName;
	}
	
	public bool IsCollectionConnection(string connectionName) {
	 	return connectionName.EndsWith("s") || connectionName.EndsWith("ed") || connectionName.EndsWith("box");
	}

	  public List<ObjectDef> GetObjects()
        {
			  _driver = new HtmlUnitDriver(false);
			 Login("wayne@prjatk.com", "sonatribe2011", _driver);
            _driver.Url = "http://developers.facebook.com/docs/reference/api/";
            var _newdriver = new HtmlUnitDriver(false);

            Login("wayne@prjatk.com", "sonatribe2011", _newdriver);
            var list = GetObjectNames();
            return list.Select(objectName => GetObject(objectName, _newdriver)).ToList();
        }
	
	 public List<string> GetObjectNames()
        {
            IEnumerable<IWebElement> pageNodes;
            pageNodes = from element in
                            _driver.FindElements(By.ClassName("page"))
                        select element;

            return (from node in pageNodes
                    select node.FindElements(By.TagName("a")).FirstOrDefault()
                    into a where a != null select a.Text).ToList();
        }

        public ObjectDef GetObject(string objectName, HtmlUnitDriver _newdriver)
        {
            var props = new List<ObjectProperty>();
            var connections = new List<ObjectProperty>();
            var publishProps = new List<ObjectProperty>();
            _newdriver.Url = string.Format(Url, "api", objectName);
           

            var content = _newdriver.PageSource;

          
            var nodes = _newdriver.FindElements(By.TagName("table"));

            IWebElement propNode = null;
            IWebElement connectionsNode = null;
            IWebElement publishNode = null;

            int index = 0;
            int connectionsIndex = objectName == "subscription" ? 2 : 1;
            int publishIndex = objectName == "subscription" ? 1 : 2;
            foreach (var node in nodes)
            {
                if (index == 0)
                {
                    propNode = node;
                }
                if (index == connectionsIndex)
                {
                    connectionsNode = node;
                }
                if (index == publishIndex)
                {
                    publishNode = node;
                }
                index++;
            }

            if (propNode != null)
            {
                FillProperties(propNode, props);
            }
            if (connectionsNode != null)
            {
                FillProperties(connectionsNode, connections, false);
            }
            if (publishNode != null)
            {
                FillProperties(publishNode, publishProps, false);
            }

            return new ObjectDef
            {
                Name = objectName,
                ProperName = ToProperName(objectName),
                Properties = props,
                Connections = connections,
                PublishProps = publishProps,
            };
        }
	
  public void FillProperties(IWebElement node, List<ObjectProperty> properties, bool skipFirstRow = true)
        {
            var rows = node.FindElements(By.TagName("tr"));

            var first = skipFirstRow;

            foreach (var row in rows)
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    var columns = row.FindElements(By.TagName("td")).ToArray();
                    if (columns.Count() > 2)
                    {
                        var prop = new ObjectProperty
                        {
                            Name = columns[0].Text.Trim(),
                            Description = columns[1].Text.Trim()
                        };
                        prop.Type = GetTypeNameFromProperty(prop.Name, prop.Description);
                        properties.Add(prop);
                    }
                }
            }
        }

		  public void Login(string username, string password, IWebDriver driver)
        {
            driver.Url = @"http://www.facebook.com/login.php";

            var email = driver.FindElement(By.Name("email"));
            email.SendKeys(username);

            var pass = driver.FindElement(By.Name("pass"));
            pass.SendKeys(password);

            var inputs = driver.FindElements(By.TagName("input"));

            var loginButton = (from input in inputs
                               where input.GetAttribute("value").ToLower() == "log in"
                               && input.GetAttribute("type").ToLower() == "submit"
                               select input).First();
            loginButton.Click();

        
        }

#>