<#@ include file="Settings.ttinclude" #>
// --------------------------------
// <copyright file="FqlObjectBuilder.tt" company="Thuzi, LLC">
//     Copyright (c) 2010 Thuzi, LLC (thuzi.com)
// </copyright>
// <author>Nathan Totten (ntotten.com) and Jim Zimmerman (jimzimmerman.com)</author>
// <license>Released under the terms of the Microsoft Public License (Ms-PL)</license>
// <website>http://facebooksdk.codeplex.com</website>
// <autogenerated>
//   This file was generated using <#= Path.GetFileName(Host.TemplateFile) #>.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
// ---------------------------------

using System;
using System.Collections.ObjectModel;
using System.Data.Linq.Mapping;

<# var objs =  GetObjects(FqlObjects); #>

namespace <#=Namespace #>.Fql {

<# foreach (var obj in objs) {#>
	[Table(Name = "<#= obj.Name #>")]
	public partial class Fql<#=obj.ProperName#> {
	
	<# foreach(var prop in obj.Properties) { #>
	/// <summary>
	<# WriteCodeComments(prop.Description); #>
		/// </summary>
		[Column(Name = "<#= prop.Name #>")]
		public <#=prop.Type#> <#=ToProperName(prop.Name, obj.ProperName)#> { get; set; }

	<#}#>
	}

<#}#>

}


<#+
	public List<ObjectDef> GetObjects(string[] list) {
		List<ObjectDef> objs = new List<ObjectDef>();
		foreach (var objectName in list) {
			objs.Add(GetObject(objectName));
		}
		return objs;
	}

	public ObjectDef GetObject(string objectName) {
		List<ObjectProperty> props = new List<ObjectProperty>();

		var url = string.Format(Url, "fql", objectName);
		var web = new HtmlAgilityPack.HtmlWeb();
		var doc = web.Load(url);
		var nodes = doc.DocumentNode.Descendants("table");
		HtmlAgilityPack.HtmlNode propNode = null;
		foreach (var node in nodes) {
			var htmlClass = node.GetAttributeValue("class", string.Empty);
			if (htmlClass == "params columns") {
				propNode = node;
				break;
			}
		}

		if (propNode != null) {
		var rows = propNode.Descendants("tr");

		bool first = true;
			foreach (var row in rows) {
				if (first) {
					first = false;
				} else {
					if (row != null) {
						var columns = row.Descendants("td");
						ObjectProperty prop = new ObjectProperty();
						int c = 0;
						foreach (var column in columns) {
							switch (c) {
								case 0:
									prop.Indexable = (column.InnerText.Trim() == "*");
									break;
								case 1:
									prop.Name = column.InnerText.Trim();
									break;
								case 2:
									prop.Type = GetTypeName(column.InnerText.Trim());
									break;
								case 3:
									prop.Description = column.InnerText.Trim();
									break;
							}
							c++;
						}
						props.Add(prop);
					}
				}
			}
		}
		
		return new ObjectDef {
			Name = objectName,
			ProperName = ToProperName(objectName),
			Properties = props,
		};
	}

#>