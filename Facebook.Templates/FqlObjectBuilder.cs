

// --------------------------------
// <copyright file="FqlObjectBuilder.tt" company="Thuzi, LLC">
//     Copyright (c) 2010 Thuzi, LLC (thuzi.com)
// </copyright>
// <author>Nathan Totten (ntotten.com) and Jim Zimmerman (jimzimmerman.com)</author>
// <license>Released under the terms of the Microsoft Public License (Ms-PL)</license>
// <website>http://facebooksdk.codeplex.com</website>
// <autogenerated>
//   This file was generated using FqlObjectBuilder.tt.
//   Any changes made manually will be lost next time the file is regenerated.
// </autogenerated>
// ---------------------------------

using System;
using System.Collections.ObjectModel;
using System.Data.Linq.Mapping;


namespace Facebook.Api.Fql
{

    [Table(Name = "album")]
    public partial class FqlAlbum
    {

        /// <summary>
        /// The ID of the album being queried. The aid cannot be longer than 50 characters.Note: Because the aid is a string, you should always wrap the aid in quotes when referenced in a query. The aid is unique only for a given user.
        /// </summary>
        [Column(Name = "aid")]
        public string Aid { get; set; }

        /// <summary>
        /// The user ID of the owner of the album being queried.
        /// </summary>
        [Column(Name = "owner")]
        public int Owner { get; set; }

        /// <summary>
        /// The ID of the photo used as the cover for the album being queried. The cover_pid cannot be longer than 50 characters.Note: Because the cover_pid is a string, you should always wrap the cover_pid in quotes when referenced in a query.
        /// </summary>
        [Column(Name = "cover_pid")]
        public string CoverPid { get; set; }

        /// <summary>
        /// The name of the album being queried.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The date that the album being queried was created.
        /// </summary>
        [Column(Name = "created")]
        public DateTime Created { get; set; }

        /// <summary>
        /// The date that the album being queried was last updated.
        /// </summary>
        [Column(Name = "modified")]
        public DateTime Modified { get; set; }

        /// <summary>
        /// The description of the album being queried.
        /// </summary>
        [Column(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// The location for the album being queried.
        /// </summary>
        [Column(Name = "location")]
        public string Location { get; set; }

        /// <summary>
        /// The number of photos in the album being queried.
        /// </summary>
        [Column(Name = "size")]
        public int Size { get; set; }

        /// <summary>
        /// The URL to the album being queried.
        /// </summary>
        [Column(Name = "link")]
        public string Link { get; set; }

        /// <summary>
        /// Indicates who can see the album. The value can be one of friends, friends-of-friends, networks, everyone, or custom (if the visibility doesn't match any of the other values). This information is available only to the album owner.
        /// </summary>
        [Column(Name = "visible")]
        public string Visible { get; set; }

        /// <summary>
        /// Indicates the time a major update (like addition of photos) was last made to the album.
        /// </summary>
        [Column(Name = "modified_major")]
        public DateTime ModifiedMajor { get; set; }

        /// <summary>
        /// The URL for editing the album.
        /// </summary>
        [Column(Name = "edit_link")]
        public string EditLink { get; set; }

        /// <summary>
        /// The type of photo album. Can be one of:
        /// <para>profile: The album containing profile pictures</para>
        /// <para>mobile: The album containing mobile upload photos</para>
        /// <para>wall The album containing photos posted to a user's Wall</para>
        /// <para>normal: For all other albums.</para>
        /// </summary>
        [Column(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// The object_id of the album on Facebook. Use the object_id to let users comment on an album with the Comments API.
        /// </summary>
        [Column(Name = "object_id")]
        public int ObjectId { get; set; }

        /// <summary>
        /// Determines whether a given UID can upload to the album. It is true if the following conditions are met:
        /// <para>* The user owns the album.</para>
        /// <para>* The album is not a special album like the profile pic album.</para>
        /// <para>* The album is not full.</para>
        /// </summary>
        [Column(Name = "can_upload")]
        public bool CanUpload { get; set; }

    }

    [Table(Name = "application")]
    public partial class FqlApplication
    {

        /// <summary>
        /// The ID of the application being queried.
        /// </summary>
        [Column(Name = "app_id")]
        public int AppId { get; set; }

        /// <summary>
        /// The API key of the application being queried.
        /// </summary>
        [Column(Name = "api_key")]
        public string ApiKey { get; set; }

        /// <summary>
        /// The string appended to apps.facebook.com/ to navigate to the application's canvas page.
        /// </summary>
        [Column(Name = "canvas_name")]
        public string CanvasName { get; set; }

        /// <summary>
        /// The name of the application.
        /// </summary>
        [Column(Name = "display_name")]
        public string DisplayName { get; set; }

        /// <summary>
        /// The URL identifying the application's icon image.
        /// </summary>
        [Column(Name = "icon_url")]
        public string IconUrl { get; set; }

        /// <summary>
        /// The URL identifying the application's logo image.
        /// </summary>
        [Column(Name = "logo_url")]
        public string LogoUrl { get; set; }

        /// <summary>
        /// The name of the company that built the application.Note: Only one of company_name and developers will contain data, never both.
        /// </summary>
        [Column(Name = "company_name")]
        public string CompanyName { get; set; }

        /// <summary>
        /// A list of records, where each record identifies a Facebook user who is marked as a developer of the application.Note: Only one of company_name and developers will contain data, never both.
        /// </summary>
        [Column(Name = "developers")]
        public string Developers { get; set; }

        /// <summary>
        /// The description of the application, as provided by the developer.
        /// </summary>
        [Column(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// The number of Facebook users who've used the application in the last day.
        /// </summary>
        [Column(Name = "daily_active_users")]
        public int DailyActiveUsers { get; set; }

        /// <summary>
        /// The number of Facebook users who've used the application in the last seven days.
        /// </summary>
        [Column(Name = "weekly_active_users")]
        public int WeeklyActiveUsers { get; set; }

        /// <summary>
        /// The number of Facebook users who've used the application in the last 30 days.
        /// </summary>
        [Column(Name = "monthly_active_users")]
        public int MonthlyActiveUsers { get; set; }

        /// <summary>
        /// The category the application can be found under.
        /// </summary>
        [Column(Name = "category")]
        public string Category { get; set; }

        /// <summary>
        /// The subcategory the application can be found under.
        /// </summary>
        [Column(Name = "subcategory")]
        public string Subcategory { get; set; }

    }

    [Table(Name = "comment")]
    public partial class FqlComment
    {

        /// <summary>
        /// The external ID of the fb:comments being queried. You can specify more than one XID.
        /// </summary>
        [Column(Name = "xid")]
        public string Xid { get; set; }

        /// <summary>
        /// The object_id of an object on Facebook. This can be a video, note, link, photo, or photo album. Note that for photos and albums, the object_id must be queried from the photo and album FQL tables. Note that in the photo and album tables, object_id is a different field from pid and aid. You must specify either an xid or an object_id.
        /// </summary>
        [Column(Name = "object_id")]
        public string ObjectId { get; set; }

        /// <summary>
        /// The ID of the post in the stream.
        /// </summary>
        [Column(Name = "post_id")]
        public string PostId { get; set; }

        /// <summary>
        /// The user submitting a comment.
        /// </summary>
        [Column(Name = "fromid")]
        public int Fromid { get; set; }

        /// <summary>
        /// A Unix timestamp associated with the creation time of a comment.
        /// </summary>
        [Column(Name = "time")]
        public int Time { get; set; }

        /// <summary>
        /// The text of a comment.
        /// </summary>
        [Column(Name = "text")]
        public string Text { get; set; }

        /// <summary>
        /// A unique ID for a given XID for each comment.
        /// </summary>
        [Column(Name = "id")]
        public int Id { get; set; }

        /// <summary>
        /// The user name that a user entered when they posted a comment. In these cases, the fromid returned will be 0. Note that user names for valid users are not returned here.
        /// </summary>
        [Column(Name = "username")]
        public string Username { get; set; }

        /// <summary>
        /// The target XID for Feed stories generated by the user; applications can retrieve comments made to that story by calling this XID.
        /// </summary>
        [Column(Name = "reply_xid")]
        public string ReplyXid { get; set; }

        /// <summary>
        /// The object_id of this comment. This can be used for querying likes for this comment or replies to this comment if the comment came from the comments plugin.
        /// </summary>
        [Column(Name = "post_fbid")]
        public string PostFbid { get; set; }

    }

    [Table(Name = "connection")]
    public partial class FqlConnection
    {

        /// <summary>
        /// The ID of the user, the source of the connection.
        /// </summary>
        [Column(Name = "source_id")]
        public int SourceId { get; set; }

        /// <summary>
        /// The target(s) of the connection. The ID of the friend or Facebook Page with whom the specified user is either a friend or fan/supporter.
        /// </summary>
        [Column(Name = "target_id")]
        public int TargetId { get; set; }

        /// <summary>
        /// Indicates whether the target is a user or a page.
        /// </summary>
        [Column(Name = "target_type")]
        public string TargetType { get; set; }

        /// <summary>
        /// Indicates whether the source is connected to the target Page (for example, if the source is a supporter or fan).
        /// </summary>
        [Column(Name = "is_following")]
        public bool IsFollowing { get; set; }

        /// <summary>
        /// The most recent time the connection was updated.
        /// </summary>
        [Column(Name = "updated_time")]
        public DateTime UpdatedTime { get; set; }

        /// <summary>
        /// Indicates whether the source severed the connection.
        /// </summary>
        [Column(Name = "is_deleted")]
        public bool IsDeleted { get; set; }

    }

    [Table(Name = "cookies")]
    public partial class FqlCooky
    {

        /// <summary>
        /// The user ID associated with the cookie.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// The name of the cookie.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The value of the cookie.
        /// </summary>
        [Column(Name = "value")]
        public string Value { get; set; }

        /// <summary>
        /// Time stamp when the cookie should expire. If not specified, the cookie never expires.
        /// </summary>
        [Column(Name = "expires")]
        public int Expires { get; set; }

        /// <summary>
        /// Path relative to the application's callback URL, with which the cookie should be associated. Default value is /
        /// </summary>
        [Column(Name = "path")]
        public string Path { get; set; }

    }

    [Table(Name = "developer")]
    public partial class FqlDeveloper
    {

        /// <summary>
        /// The user ID of the application developer being queried.
        /// </summary>
        [Column(Name = "developer_id")]
        public string DeveloperId { get; set; }

        /// <summary>
        /// The application ID of any applications associated with the developer.
        /// </summary>
        [Column(Name = "application_id")]
        public int ApplicationId { get; set; }

    }

    [Table(Name = "event")]
    public partial class FqlEvent
    {

        /// <summary>
        /// The ID of the event being queried.
        /// </summary>
        [Column(Name = "eid")]
        public int Eid { get; set; }

        /// <summary>
        /// The name of the event being queried.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The tagline or summary of the event being queried.
        /// </summary>
        [Column(Name = "tagline")]
        public string Tagline { get; set; }

        /// <summary>
        /// The network ID of the event being queried.
        /// </summary>
        [Column(Name = "nid")]
        public int Nid { get; set; }

        /// <summary>
        /// The URL to the small-sized profile picture for the event being queried. The image can have a maximum width of 50px and a maximum height of 150px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_small")]
        public string PicSmall { get; set; }

        /// <summary>
        /// The URL to the largest-sized profile picture for the event being queried. The image can have a maximum width of 200px and a maximum height of 600px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_big")]
        public string PicBig { get; set; }

        /// <summary>
        /// The URL to the medium-sized profile picture for the event being queried. The image can have a maximum width of 100px and a maximum height of 300px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic")]
        public string Pic { get; set; }

        /// <summary>
        /// The name of the host of the event being queried.
        /// </summary>
        [Column(Name = "host")]
        public string Host { get; set; }

        /// <summary>
        /// The description of the event being queried.
        /// </summary>
        [Column(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// The category of the event being queried. For a listing, see Event Categories.
        /// </summary>
        [Column(Name = "event_type")]
        public string EventType { get; set; }

        /// <summary>
        /// The event type for the event being queried. For a listing, see Event Categories.
        /// </summary>
        [Column(Name = "event_subtype")]
        public string EventSubtype { get; set; }

        /// <summary>
        /// The starting date and time of the event being queried.
        /// </summary>
        [Column(Name = "start_time")]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// The ending date and time of the event being queried.
        /// </summary>
        [Column(Name = "end_time")]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// The user ID of the creator of the event being queried.
        /// </summary>
        [Column(Name = "creator")]
        public int Creator { get; set; }

        /// <summary>
        /// The time that the event being queried was last updated.
        /// </summary>
        [Column(Name = "update_time")]
        public DateTime UpdateTime { get; set; }

        /// <summary>
        /// The location of the event being queried.
        /// </summary>
        [Column(Name = "location")]
        public string Location { get; set; }

        /// <summary>
        /// The venue where the event being queried is being held.
        /// </summary>
        [Column(Name = "venue")]
        public string Venue { get; set; }

        /// <summary>
        /// The privacy setting of the event being queried, indicating whether the event is OPEN, CLOSED, or SECRET.
        /// </summary>
        [Column(Name = "privacy")]
        public string Privacy { get; set; }

        /// <summary>
        /// Indicates whether to hide the guest list on the event's page, where true means to hide the guest list.
        /// </summary>
        [Column(Name = "hide_guest_list")]
        public bool HideGuestList { get; set; }

    }

    [Table(Name = "event_member")]
    public partial class FqlEventMember
    {

        /// <summary>
        /// The user ID of the user for the event being queried.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// The ID of the event being queried.
        /// </summary>
        [Column(Name = "eid")]
        public int Eid { get; set; }

        /// <summary>
        /// The reply status of the user for the event being queried.  There are four possible return values: attending, unsure, declined, and not_replied.
        /// </summary>
        [Column(Name = "rsvp_status")]
        public string RsvpStatus { get; set; }

        /// <summary>
        /// The timestamp when the event began or will begin.  This is particularly useful as a WHERE filter to speed up your query when querying for one or more user's events.  But it cannot be used when querying for users invited to a particular event.
        /// </summary>
        [Column(Name = "start_time")]
        public DateTime StartTime { get; set; }

    }

    [Table(Name = "family")]
    public partial class FqlFamily
    {

        /// <summary>
        /// The ID of the user being queried.
        /// </summary>
        [Column(Name = "profile_id")]
        public int ProfileId { get; set; }

        /// <summary>
        /// The user ID of the relative, which is returned if the relationship is confirmed and links to another profile.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// The name of the relative, which is returned if the relationship is not linked to another profile.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The birthday of the relative, which is returned if the relationship is not linked to another profile.
        /// </summary>
        [Column(Name = "birthday")]
        public string Birthday { get; set; }

        /// <summary>
        /// A string describing how the relative is related to the user being queried.
        /// </summary>
        [Column(Name = "relationship")]
        public string Relationship { get; set; }

    }

    [Table(Name = "friend")]
    public partial class FqlFriend
    {

        /// <summary>
        /// The user ID of the first user in the pair being queried.
        /// </summary>
        [Column(Name = "uid1")]
        public int Uid1 { get; set; }

        /// <summary>
        /// The user ID of the second user in the pair being queried.
        /// </summary>
        [Column(Name = "uid2")]
        public int Uid2 { get; set; }

    }

    [Table(Name = "friendlist")]
    public partial class FqlFriendList
    {

        /// <summary>
        /// The user ID of the user who created the friend list.
        /// </summary>
        [Column(Name = "owner")]
        public int Owner { get; set; }

        /// <summary>
        /// The ID of the friend list.
        /// </summary>
        [Column(Name = "flid")]
        public int Flid { get; set; }

        /// <summary>
        /// The name of the friend list.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

    }

    [Table(Name = "friendlist_member")]
    public partial class FqlFriendListMember
    {

        /// <summary>
        /// The ID of the friend list.
        /// </summary>
        [Column(Name = "flid")]
        public int Flid { get; set; }

        /// <summary>
        /// The user ID of the friend list member.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

    }

    [Table(Name = "friend_request")]
    public partial class FqlFriendRequest
    {

        /// <summary>
        /// The user ID of the user making the friend request.
        /// </summary>
        [Column(Name = "uid_from")]
        public int UidFrom { get; set; }

        /// <summary>
        /// The user ID of the user receiving the friend request (which must be the logged-in user if uid_from is not the logged-in user).
        /// </summary>
        [Column(Name = "uid_to")]
        public int UidTo { get; set; }

    }

    [Table(Name = "group")]
    public partial class FqlGroup
    {

        /// <summary>
        /// The group ID of the group being queried.
        /// </summary>
        [Column(Name = "gid")]
        public int Gid { get; set; }

        /// <summary>
        /// The name of the group being queried.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The network ID for the network to which the group being queried belongs, if any.
        /// </summary>
        [Column(Name = "nid")]
        public int Nid { get; set; }

        /// <summary>
        /// The URL to the smallest-sized photo for the group being queried. The image can have a maximum width of 50px and a maximum height of 150px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_small")]
        public string PicSmall { get; set; }

        /// <summary>
        /// The largest-sized photo for the group being queried. The image can have a maximum width of 200px and a maximum height of 600px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_big")]
        public string PicBig { get; set; }

        /// <summary>
        /// The medium-sized photo for the group being queried. The image can have a maximum width of 100px and a maximum height of 300px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic")]
        public string Pic { get; set; }

        /// <summary>
        /// The description of the group being queried.
        /// </summary>
        [Column(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// The category of the group being queried.
        /// </summary>
        [Column(Name = "group_type")]
        public string GroupType { get; set; }

        /// <summary>
        /// The group type for the group being queried.
        /// </summary>
        [Column(Name = "group_subtype")]
        public string GroupSubtype { get; set; }

        /// <summary>
        /// The contents of the Recent News field of the group being queried.
        /// </summary>
        [Column(Name = "recent_news")]
        public string RecentNews { get; set; }

        /// <summary>
        /// The user ID of the user who created the group being queried.
        /// </summary>
        [Column(Name = "creator")]
        public int Creator { get; set; }

        /// <summary>
        /// The last time the group being queried was updated.
        /// </summary>
        [Column(Name = "update_time")]
        public DateTime UpdateTime { get; set; }

        /// <summary>
        /// The location of the office of the group being queried.
        /// </summary>
        [Column(Name = "office")]
        public string Office { get; set; }

        /// <summary>
        /// The URL for the Web site of the group being queried.
        /// </summary>
        [Column(Name = "website")]
        public string Website { get; set; }

        /// <summary>
        /// The venue of the group being queried.  This is an object containing street, city, state, country, zip, latitude, and longitude fields.
        /// </summary>
        [Column(Name = "venue")]
        public object Venue { get; set; }

        /// <summary>
        /// The privacy setting of the group being queried, indicating whether the group is OPEN, CLOSED, or SECRET.
        /// </summary>
        [Column(Name = "privacy")]
        public string Privacy { get; set; }

        /// <summary>
        /// The group version.  New groups are versioned > 0.
        /// </summary>
        [Column(Name = "version")]
        public string Version { get; set; }

    }

    [Table(Name = "group_member")]
    public partial class FqlGroupMember
    {

        /// <summary>
        /// The user ID of the member of the group being queried.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// The ID of the group being queried.
        /// </summary>
        [Column(Name = "gid")]
        public int Gid { get; set; }

        /// <summary>
        /// Any positions taken by the member of the group being queried.
        /// </summary>
        [Column(Name = "positions")]
        public string Positions { get; set; }

    }

    [Table(Name = "like")]
    public partial class FqlLike
    {

        /// <summary>
        /// The object_id of an object on Facebook. This can be a video, note, link, photo, or photo album. Note that for photos and albums, the object_id must be queried from the photo and album FQL tables. Note that the object_id is a different field from the photo table's pid field and the album table's aid field.
        /// </summary>
        [Column(Name = "object_id")]
        public string ObjectId { get; set; }

        /// <summary>
        /// The id of a post on Facebook. This can be a stream post containing a status, video, note, link, photo, or photo album. These post IDs must be queried from the stream FQL table.
        /// </summary>
        [Column(Name = "post_id")]
        public string PostId { get; set; }

        /// <summary>
        /// The user who likes this object.
        /// </summary>
        [Column(Name = "user_id")]
        public int UserId { get; set; }

    }

    [Table(Name = "links")]
    public partial class FqlLink
    {

        /// <summary>
        /// The unique identifier for the link.
        /// </summary>
        [Column(Name = "link_id")]
        public int LinkId { get; set; }

        /// <summary>
        /// The user ID for the user who posted the link.
        /// </summary>
        [Column(Name = "owner")]
        public int Owner { get; set; }

        /// <summary>
        /// The comment the owner made about the link.
        /// </summary>
        [Column(Name = "owner_comment")]
        public string OwnerComment { get; set; }

        /// <summary>
        /// The time the user posted the link.
        /// </summary>
        [Column(Name = "created_time")]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// The title of the link, as taken from the site's title meta tag.
        /// </summary>
        [Column(Name = "title")]
        public string Title { get; set; }

        /// <summary>
        /// A summary of the link, as taken from the site's description meta tag.
        /// </summary>
        [Column(Name = "summary")]
        public string Summary { get; set; }

        /// <summary>
        /// The actual URL for the link.
        /// </summary>
        [Column(Name = "url")]
        public string Url { get; set; }

        /// <summary>
        /// The URLs to the images associated with the link, as taken from the site's link tag.
        /// </summary>
        [Column(Name = "image_urls")]
        public Collection<dynamic> ImageUrls { get; set; }

    }

    [Table(Name = "link_stat")]
    public partial class FqlLinkStat
    {

        /// <summary>
        /// The URL to the Web page users can share with Facebook Share. This is the indexable field in the table, so you must specify it in your query's WHERE clause. To specify more than one URL, you must use the IN operator in the query's WHERE clause.
        /// </summary>
        [Column(Name = "url")]
        public string Url { get; set; }

        /// <summary>
        /// The normalized URL for the page being shared.
        /// </summary>
        [Column(Name = "normalized_url")]
        public string NormalizedUrl { get; set; }

        /// <summary>
        /// The number of times users have shared the page on Facebook.
        /// </summary>
        [Column(Name = "share_count")]
        public string ShareCount { get; set; }

        /// <summary>
        /// The number of times Facebook users have "Liked" the page, or liked any comments or re-shares of this page.
        /// </summary>
        [Column(Name = "like_count")]
        public string LikeCount { get; set; }

        /// <summary>
        /// The number of comments users have made on the shared story.
        /// </summary>
        [Column(Name = "comment_count")]
        public string CommentCount { get; set; }

        /// <summary>
        /// The total number of times the URL has been shared, liked, or commented on.
        /// </summary>
        [Column(Name = "total_count")]
        public string TotalCount { get; set; }

        /// <summary>
        /// The number of comments from a comments box on this URL. This only includes top level comments, not replies.
        /// </summary>
        [Column(Name = "commentsbox_count")]
        public string CommentsboxCount { get; set; }

        /// <summary>
        /// The object_id associated with comments plugin comments for this url. This can be used to query for comments using the comment FQL table.
        /// </summary>
        [Column(Name = "comments_fbid")]
        public string CommentsFbid { get; set; }

    }

    [Table(Name = "mailbox_folder")]
    public partial class FqlMailboxFolder
    {

        /// <summary>
        /// The ID of the folder being queried. The ID can be one of: 0 (for Inbox), 1 (for Outbox), or 4 (for Updates).
        /// </summary>
        [Column(Name = "folder_id")]
        public int FolderId { get; set; }

        /// <summary>
        /// The ID of the user whose Inbox you are querying.
        /// </summary>
        [Column(Name = "viewer_id")]
        public int ViewerId { get; set; }

        /// <summary>
        /// A short description of the folder being queried.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The number of unread threads in the folder being queried.
        /// </summary>
        [Column(Name = "unread_count")]
        public int UnreadCount { get; set; }

    }

    [Table(Name = "message")]
    public partial class FqlMessage
    {

        /// <summary>
        /// A unique ID for the message being queried.
        /// </summary>
        [Column(Name = "message_id")]
        public string MessageId { get; set; }

        /// <summary>
        /// The ID of the thread the message belongs to.
        /// </summary>
        [Column(Name = "thread_id")]
        public int ThreadId { get; set; }

        /// <summary>
        /// The ID of the user who wrote this message.
        /// </summary>
        [Column(Name = "author_id")]
        public int AuthorId { get; set; }

        /// <summary>
        /// The content of the message.
        /// </summary>
        [Column(Name = "body")]
        public string Body { get; set; }

        /// <summary>
        /// The time the message was sent.
        /// </summary>
        [Column(Name = "created_time")]
        public int CreatedTime { get; set; }

        /// <summary>
        /// An array of information about the attachment to the message. This is the attachment that Facebook returns.
        /// </summary>
        [Column(Name = "attachment")]
        public Collection<dynamic> Attachment { get; set; }

        /// <summary>
        /// The ID of the user whose Inbox you are querying. Defaults to session user.
        /// </summary>
        [Column(Name = "viewer_id")]
        public int ViewerId { get; set; }

    }

    [Table(Name = "metrics")]
    public partial class FqlMetric
    {

    }

    [Table(Name = "notes")]
    public partial class FqlNote
    {

        /// <summary>
        /// The user ID of the current user.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// The unique identifier for the note.
        /// </summary>
        [Column(Name = "note_id")]
        public int NoteId { get; set; }

        /// <summary>
        /// The time the user created the note.
        /// </summary>
        [Column(Name = "created_time")]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// The most recent time the user edited the note.
        /// </summary>
        [Column(Name = "updated_time")]
        public DateTime UpdatedTime { get; set; }

        /// <summary>
        /// The body of the note.
        /// </summary>
        [Column(Name = "content")]
        public string Content { get; set; }

        /// <summary>
        /// The title of the note.
        /// </summary>
        [Column(Name = "title")]
        public string Title { get; set; }

    }

    [Table(Name = "notification")]
    public partial class FqlNotification
    {

        /// <summary>
        /// The ID of the notification. This ID is not globally unique, so the recipient_id must be specified in addition to it.
        /// </summary>
        [Column(Name = "notification_id")]
        public int NotificationId { get; set; }

        /// <summary>
        /// The user ID of the sender of the notification.
        /// </summary>
        [Column(Name = "sender_id")]
        public int SenderId { get; set; }

        /// <summary>
        /// The user ID of the recipient of the notification. It is always the current session user.
        /// </summary>
        [Column(Name = "recipient_id")]
        public int RecipientId { get; set; }

        /// <summary>
        /// The time the notification was originally sent. Notifications older than 7 days are deleted and will not be returned via this table or notifications.getList.
        /// </summary>
        [Column(Name = "created_time")]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// The time the notification was originally sent, or the time the associated application's notifications were hidden or unhidden by the user, whichever is later.
        /// </summary>
        [Column(Name = "updated_time")]
        public DateTime UpdatedTime { get; set; }

        /// <summary>
        /// The main body of the notification in HTML.
        /// </summary>
        [Column(Name = "title_html")]
        public string TitleHtml { get; set; }

        /// <summary>
        /// The plaintext version of title_html, with all HTML tags stripped out.
        /// </summary>
        [Column(Name = "title_text")]
        public string TitleText { get; set; }

        /// <summary>
        /// Any additional content the notification includes, in HTML.
        /// </summary>
        [Column(Name = "body_html")]
        public string BodyHtml { get; set; }

        /// <summary>
        /// The plaintext version of body_html, with all HTML tags stripped out.
        /// </summary>
        [Column(Name = "body_text")]
        public string BodyText { get; set; }

        /// <summary>
        /// The URL associated with the notification. This is usually a location where the user can interact with the subject of the notification.
        /// </summary>
        [Column(Name = "href")]
        public string Href { get; set; }

        /// <summary>
        /// The ID of the application associated with the notification. This may be a third-party application or a Facebook application (for example, Wall).
        /// </summary>
        [Column(Name = "app_id")]
        public int AppId { get; set; }

        /// <summary>
        /// Indicates whether the notification has been marked as read. Use notifications.markRead to mark a notification as read.
        /// </summary>
        [Column(Name = "is_unread")]
        public bool IsUnread { get; set; }

        /// <summary>
        /// Indicates whether the user hid the associated application's notifications.
        /// </summary>
        [Column(Name = "is_hidden")]
        public bool IsHidden { get; set; }

    }

    [Table(Name = "object_url")]
    public partial class FqlObjectUrl
    {

        /// <summary>
        /// The URL for the webpage being queried
        /// </summary>
        [Column(Name = "url")]
        public string Url { get; set; }

        /// <summary>
        /// The ID of the Graph object represented by the URL
        /// </summary>
        [Column(Name = "id")]
        public int Id { get; set; }

        /// <summary>
        /// The type of object the URL represents (note: 'Page' incorporates any URL with an 'og:type' specified)
        /// </summary>
        [Column(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// The normalized domain name the URL is on
        /// </summary>
        [Column(Name = "site")]
        public string Site { get; set; }

    }

    [Table(Name = "page")]
    public partial class FqlPage
    {

        /// <summary>
        /// The ID of the Page being queried.
        /// </summary>
        [Column(Name = "page_id")]
        public int PageId { get; set; }

        /// <summary>
        /// The name of the Page being queried.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The URL to the small-sized picture for the Page being queried. The image can have a maximum width of 50px and a maximum height of 150px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_small")]
        public string PicSmall { get; set; }

        /// <summary>
        /// The URL to the large-sized profile picture for the Page being queried. The image can have a maximum width of 200px and a maximum height of 600px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_big")]
        public string PicBig { get; set; }

        /// <summary>
        /// The URL to the square profile picture for the Page being queried. The image can have a maximum width and height of 50px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_square")]
        public string PicSquare { get; set; }

        /// <summary>
        /// The URL to the medium-sized profile picture for the Page being queried. The image can have a maximum width of 100px and a maximum height of 300px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic")]
        public string Pic { get; set; }

        /// <summary>
        /// The URL to the largest-sized profile picture for the Page being queried. The image can have a maximum width of 396px and a maximum height of 1188px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_large")]
        public string PicLarge { get; set; }

        /// <summary>
        /// The profile URL for the Page being queried. If the Page admin specified a username for the Page, page_url contains the username.
        /// </summary>
        [Column(Name = "page_url")]
        public string PageUrl { get; set; }

        /// <summary>
        /// The number of people who like the Page.
        /// </summary>
        [Column(Name = "fan_count")]
        public int FanCount { get; set; }

        /// <summary>
        /// The type of Page being queried.
        /// </summary>
        [Column(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// The URL to the Web site of of the Page being queried.
        /// </summary>
        [Column(Name = "website")]
        public string Website { get; set; }

        /// <summary>
        /// Indicates whether a calling application has been added by the Page being queried.
        /// </summary>
        [Column(Name = "has_added_app")]
        public bool HasAddedApp { get; set; }

        /// <summary>
        /// The date when the subject of the Page being queried was founded. This field may be blank.
        /// </summary>
        [Column(Name = "founded")]
        public string Founded { get; set; }

        /// <summary>
        /// Summary of the subject of the Page being queried. This field may be blank.
        /// </summary>
        [Column(Name = "company_overview")]
        public string CompanyOverview { get; set; }

        /// <summary>
        /// The mission statement of the organization that is the subject of the Page being queried. This field may be blank.
        /// </summary>
        [Column(Name = "mission")]
        public string Mission { get; set; }

        /// <summary>
        /// The products offered by the company on the Page being queried. This field may be blank.
        /// </summary>
        [Column(Name = "products")]
        public string Products { get; set; }

        /// <summary>
        /// The location of the Page being queried, including the street, city, state, country and zip (or post code). Some of the fields may be blank.
        /// </summary>
        [Column(Name = "location")]
        public string Location { get; set; }

        /// <summary>
        /// The type of parking available at the location of the Page being queried.
        /// </summary>
        [Column(Name = "parking")]
        public string Parking { get; set; }

        /// <summary>
        /// The type of public transportation available near the location of the Page being queried. This field may be blank.
        /// </summary>
        [Column(Name = "public_transit")]
        public string PublicTransit { get; set; }

        /// <summary>
        /// The hours of operation for the Page being queried.
        /// </summary>
        [Column(Name = "hours")]
        public string Hours { get; set; }

    }

    [Table(Name = "page_admin")]
    public partial class FqlPageAdmin
    {

        /// <summary>
        /// The user ID for the admin of the Page being queried.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// The ID of the Page being queried.
        /// </summary>
        [Column(Name = "page_id")]
        public int PageId { get; set; }

        /// <summary>
        /// The type of Page being queried.
        /// </summary>
        [Column(Name = "type")]
        public string Type { get; set; }

    }

    [Table(Name = "page_fan")]
    public partial class FqlPageFan
    {

        /// <summary>
        /// The user ID for the fan of the Page being queried.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// The ID of the Page being queried.
        /// </summary>
        [Column(Name = "page_id")]
        public int PageId { get; set; }

        /// <summary>
        /// The type of Page being queried.
        /// </summary>
        [Column(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// The unix time when the user liked (aka 'fanned') this page
        /// </summary>
        [Column(Name = "created_time")]
        public DateTime CreatedTime { get; set; }

    }

    [Table(Name = "permissions")]
    public partial class FqlPermission
    {

        /// <summary>
        /// The user ID of the current user, or the page_id of the Page.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// Indicates whether the user granted your application the extended permission. Substitute the name of a specific permission for PERMISSION_NAME.
        /// </summary>
        [Column(Name = "PERMISSION_NAME")]
        public bool PermissionName { get; set; }

    }

    [Table(Name = "permissions_info")]
    public partial class FqlPermissionsInfo
    {

        /// <summary>
        /// The name of the extended permission.
        /// </summary>
        [Column(Name = "permission_name")]
        public string PermissionName { get; set; }

        /// <summary>
        /// A descriptive header for the extended permission.
        /// </summary>
        [Column(Name = "header")]
        public string Header { get; set; }

        /// <summary>
        /// A longer description of the permission.
        /// </summary>
        [Column(Name = "summary")]
        public string Summary { get; set; }

    }

    [Table(Name = "photo")]
    public partial class FqlPhoto
    {

        /// <summary>
        /// The ID of the photo being queried. The pid cannot be longer than 50 characters.Note: Because the pid is a string, you should always wrap the pid in quotes when referenced in a query. The pid is unique only for a given user.
        /// </summary>
        [Column(Name = "pid")]
        public string Pid { get; set; }

        /// <summary>
        /// The ID of the album containing the photo being queried. The aid cannot be longer than 50 characters.Note: Because the aid is a string, you should always wrap the aid in quotes when referenced in a query. The aid is unique only for a given user.
        /// </summary>
        [Column(Name = "aid")]
        public string Aid { get; set; }

        /// <summary>
        /// The user ID of the owner of the photo being queried.
        /// </summary>
        [Column(Name = "owner")]
        public int Owner { get; set; }

        /// <summary>
        /// The URL to the thumbnail version of the photo being queried. The image can have a maximum width of 75px and a maximum height of 225px. This URL may be blank.
        /// </summary>
        [Column(Name = "src_small")]
        public string SrcSmall { get; set; }

        /// <summary>
        /// Height of the thumbnail version, in px. This field may be blank.
        /// </summary>
        [Column(Name = "src_small_height")]
        public string SrcSmallHeight { get; set; }

        /// <summary>
        /// Width of the thumbnail version, in px. This field may be blank.
        /// </summary>
        [Column(Name = "src_small_width")]
        public string SrcSmallWidth { get; set; }

        /// <summary>
        /// The URL to the full-sized version of the photo being queried. The image can have a maximum width or height of 720px. This URL may be blank.
        /// </summary>
        [Column(Name = "src_big")]
        public string SrcBig { get; set; }

        /// <summary>
        /// Height of the full-sized version, in px. This field may be blank.
        /// </summary>
        [Column(Name = "src_big_height")]
        public string SrcBigHeight { get; set; }

        /// <summary>
        /// Width of the full-sized version, in px. This field may be blank.
        /// </summary>
        [Column(Name = "src_big_width")]
        public string SrcBigWidth { get; set; }

        /// <summary>
        /// The URL to the album view version of the photo being queried. The image can have a maximum width or height of 130px. This URL may be blank.
        /// </summary>
        [Column(Name = "src")]
        public string Src { get; set; }

        /// <summary>
        /// Height of the album view version, in px. This field may be blank.
        /// </summary>
        [Column(Name = "src_height")]
        public string SrcHeight { get; set; }

        /// <summary>
        /// Width of the album view version, in px. This field may be blank.
        /// </summary>
        [Column(Name = "src_width")]
        public string SrcWidth { get; set; }

        /// <summary>
        /// The URL to the page containing the photo being queried.
        /// </summary>
        [Column(Name = "link")]
        public string Link { get; set; }

        /// <summary>
        /// The caption for the photo being queried.
        /// </summary>
        [Column(Name = "caption")]
        public string Caption { get; set; }

        /// <summary>
        /// The date when the photo being queried was added.
        /// </summary>
        [Column(Name = "created")]
        public DateTime Created { get; set; }

        /// <summary>
        /// The date when the photo being queried was last modified.
        /// </summary>
        [Column(Name = "modified")]
        public DateTime Modified { get; set; }

        /// <summary>
        /// The object_id of a photo on Facebook. Use the object_id to let users comment on a photo with the Comments API.
        /// </summary>
        [Column(Name = "object_id")]
        public int ObjectId { get; set; }

    }

    [Table(Name = "photo_tag")]
    public partial class FqlPhotoTag
    {

        /// <summary>
        /// The ID of the photo being queried. The pid cannot be longer than 50 characters.Note: Because the pid is a string, you should always wrap the pid in quotes when referenced in a query.
        /// </summary>
        [Column(Name = "pid")]
        public string Pid { get; set; }

        /// <summary>
        /// For tagged users, use the user ID of the subject for the tag being queried. For photos associated with events or groups, use the eid or gid for subject.
        /// </summary>
        [Column(Name = "subject")]
        public int Subject { get; set; }

        /// <summary>
        /// The content of the tag being queried.
        /// </summary>
        [Column(Name = "text")]
        public string Text { get; set; }

        /// <summary>
        /// The center of the tag's horizontal position, measured as a floating-point percentage from 0 to 100, from the left edge of the photo.
        /// </summary>
        [Column(Name = "xcoord")]
        public float Xcoord { get; set; }

        /// <summary>
        /// The center of the tag's vertical position, measured as a floating-point percentage from 0 to 100, from the top edge of the photo.
        /// </summary>
        [Column(Name = "ycoord")]
        public float Ycoord { get; set; }

        /// <summary>
        /// The date that the tag being queried was created.
        /// </summary>
        [Column(Name = "created")]
        public DateTime Created { get; set; }

    }

    [Table(Name = "privacy")]
    public partial class FqlPrivacy
    {

        /// <summary>
        /// The ID of an object on Facebook. This can be a video, note, link, photo, or photo album.
        /// </summary>
        [Column(Name = "object_id")]
        public string ObjectId { get; set; }

        /// <summary>
        /// The object ID (this is an alias for the "object_id" column).
        /// </summary>
        [Column(Name = "id")]
        public string Id { get; set; }

        /// <summary>
        /// The privacy value for the object, one of EVERYONE, CUSTOM, ALL_FRIENDS, NETWORKS_FRIENDS, FRIENDS_OF_FRIENDS.
        /// </summary>
        [Column(Name = "value")]
        public string Value { get; set; }

        /// <summary>
        /// A description of the privacy settings. For CUSTOM settings, it can contain names of users, networks, and friend lists.
        /// </summary>
        [Column(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// The IDs of the specific users or friend lists that can see the object (as a comma-separated string).
        /// </summary>
        [Column(Name = "allow")]
        public string Allow { get; set; }

        /// <summary>
        /// The IDs of the specific users or friend lists that cannot see the object (as a comma-separated string).
        /// </summary>
        [Column(Name = "deny")]
        public string Deny { get; set; }

        /// <summary>
        /// The ID of the user who owns the object.
        /// </summary>
        [Column(Name = "owner_id")]
        public int OwnerId { get; set; }

        /// <summary>
        /// The ID of the network that can see the object, or 1 for all of the user's networks.
        /// </summary>
        [Column(Name = "networks")]
        public int Networks { get; set; }

        /// <summary>
        /// Which users can see the object. Can be one of EVERYONE, NETWORKS_FRIENDS, FRIENDS_OF_FRIENDS, ALL_FRIENDS, SOME_FRIENDS, SELF, or NO_FRIENDS.
        /// </summary>
        [Column(Name = "friends")]
        public string Friends { get; set; }

    }

    [Table(Name = "profile")]
    public partial class FqlProfile
    {

        /// <summary>
        /// A 64-bit int representing the user ID or Page ID.
        /// </summary>
        [Column(Name = "id")]
        public int Id { get; set; }

        /// <summary>
        /// The full name of the user or Page being queried.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The URL to a user's profile or Page. If the user or Page has a username, url contains the username.
        /// </summary>
        [Column(Name = "url")]
        public string Url { get; set; }

        /// <summary>
        /// The URL to the small-sized profile picture for the user or Page being queried. The image can have a maximum width of 50px and a maximum height of 150px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic")]
        public string Pic { get; set; }

        /// <summary>
        /// The URL to the square profile picture for the user or Page being queried. The image can have a maximum width and height of 50px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_square")]
        public string PicSquare { get; set; }

        /// <summary>
        /// The URL to the small-sized profile picture for the user or Page being queried. The image can have a maximum width of 50px and a maximum height of 150px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_small")]
        public string PicSmall { get; set; }

        /// <summary>
        /// The URL to the largest-sized profile picture for the user or Page being queried. The image can have a maximum width of 200px and a maximum height of 600px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_big")]
        public string PicBig { get; set; }

        /// <summary>
        /// The type of profile, either user for a user profile or page for a  Facebook Page.
        /// </summary>
        [Column(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// The username of the user being queried.
        /// </summary>
        [Column(Name = "username")]
        public string Username { get; set; }

    }

    [Table(Name = "standard_friend_info")]
    public partial class FqlStandardFriendInfo
    {

        /// <summary>
        /// The user ID of the first user in the pair being queried.
        /// </summary>
        [Column(Name = "uid1")]
        public int Uid1 { get; set; }

        /// <summary>
        /// The user ID of the second user in the pair being queried.
        /// </summary>
        [Column(Name = "uid2")]
        public int Uid2 { get; set; }

    }

    [Table(Name = "standard_user_info")]
    public partial class FqlStandardUserInfo
    {

        /// <summary>
        /// The user ID of the user being queried.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// The first name of the user being queried.
        /// </summary>
        [Column(Name = "first_name")]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the user being queried.
        /// </summary>
        [Column(Name = "last_name")]
        public string LastName { get; set; }

        /// <summary>
        /// The full name of the user being queried.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The two-letter country code for the user's locale. Codes used are the ISO 3166 alpha 2 code list.
        /// </summary>
        [Column(Name = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// The corporate or educational networks to which the user being queried belongs. Regional networks have been deprecated and are no longer returned.
        /// </summary>
        [Column(Name = "affiliations")]
        public Collection<dynamic> Affiliations { get; set; }

        /// <summary>
        /// The URL to a user's profile.
        /// </summary>
        [Column(Name = "profile_url")]
        public string ProfileUrl { get; set; }

        /// <summary>
        /// The time zone where the user being queried is located.
        /// </summary>
        [Column(Name = "timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// The birthday of the user being queried.
        /// </summary>
        [Column(Name = "birthday")]
        public string Birthday { get; set; }

        /// <summary>
        /// The sex of the user being queried.
        /// </summary>
        [Column(Name = "sex")]
        public string Sex { get; set; }

        /// <summary>
        /// The  proxied wrapper for a user's email address.
        /// </summary>
        [Column(Name = "proxied_email")]
        public string ProxiedEmail { get; set; }

        /// <summary>
        /// The city in which the user currently lives.
        /// </summary>
        [Column(Name = "current_location")]
        public string CurrentLocation { get; set; }

        /// <summary>
        /// A comma delimited list of Demographic Restrictions types a user is allowed to access. Currently, alcohol is the only type that can be returned.
        /// </summary>
        [Column(Name = "allowed_restrictions")]
        public string AllowedRestrictions { get; set; }

    }

    [Table(Name = "status")]
    public partial class FqlStatus
    {

        /// <summary>
        /// The user ID of the current user.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// The ID of the status message.
        /// </summary>
        [Column(Name = "status_id")]
        public string StatusId { get; set; }

        /// <summary>
        /// The date and time the status message was posted.
        /// </summary>
        [Column(Name = "time")]
        public string Time { get; set; }

        /// <summary>
        /// The application that published the status originally.
        /// </summary>
        [Column(Name = "source")]
        public string Source { get; set; }

        /// <summary>
        /// The content of the status message.
        /// </summary>
        [Column(Name = "message")]
        public string Message { get; set; }

    }

    [Table(Name = "stream")]
    public partial class FqlStream
    {

        /// <summary>
        /// The ID of the post from the user's stream. This field, when used as an index, is primarily used to re-retrieve posts. Otherwise, it is used to specify a post when using any of the stream setters.
        /// </summary>
        [Column(Name = "post_id")]
        public string PostId { get; set; }

        /// <summary>
        /// The ID of the user whose stream you are querying. The viewer_id defaults to the active session key.
        /// </summary>
        [Column(Name = "viewer_id")]
        public int ViewerId { get; set; }

        /// <summary>
        /// The application ID for the application through which the post was published. This includes application IDs for Facebook applications like Photos and Video.
        /// </summary>
        [Column(Name = "app_id")]
        public int AppId { get; set; }

        /// <summary>
        /// The ID of the user, Page, group, or event whose posts you want to retrieve.  This includes both posts that the user or Page has authored (that is, the actor_id is the source_id) and posts that have been directed at this target user, Page, group, or event (that is, the target_id is the source_id).
        /// </summary>
        [Column(Name = "source_id")]
        public int SourceId { get; set; }

        /// <summary>
        /// The time the post was last updated, which occurs when a user comments on the post.
        /// </summary>
        [Column(Name = "updated_time")]
        public DateTime UpdatedTime { get; set; }

        /// <summary>
        /// The time the post was published to the user's stream.
        /// </summary>
        [Column(Name = "created_time")]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// The filter key to fetch data with. This key should be retrieved from stream.getFilters or querying the stream_filter FQL table.
        /// </summary>
        [Column(Name = "filter_key")]
        public string FilterKey { get; set; }

        /// <summary>
        /// For posts published by applications, this is the string that states through which application the post was published. For example, "Joe loves the Social Web (by MicroBloggerApp)."
        /// </summary>
        [Column(Name = "attribution")]
        public string Attribution { get; set; }

        /// <summary>
        /// The user ID of the person who is the user taking the action in the post.
        /// </summary>
        [Column(Name = "actor_id")]
        public string ActorId { get; set; }

        /// <summary>
        /// The user or Page to whom the post was directed.
        /// </summary>
        [Column(Name = "target_id")]
        public string TargetId { get; set; }

        /// <summary>
        /// The message written by the user.
        /// </summary>
        [Column(Name = "message")]
        public string Message { get; set; }

        /// <summary>
        /// An array of application-specific information supplied to Facebook to create the attachment to the post. This information is not needed to render a user's stream in your application, unless you need this information for special handing of your own application posts. This array includes:
        /// <para>tbid (i64): A 64-bit int representing the template bundle ID, for posts that entered the stream through the now discontinued method feed.publishUserAction and similar calls that are not stream publishing methods (like stream.publish or Facebook.streamPublish).</para>
        /// <para>attachment_data (array): An array containing the template data, for posts that entered the stream through the now discontinued method feed.publishUserAction and similar calls that are not stream publishing methods (like stream.publish or Facebook.streamPublish).</para>
        /// <para>images (array): A JSON-encoded object containing any images associated with the story. These images are specified in Attachment (Streams) (and used to be specified in Template Data, if an application used a now discontinued method like feed.publishUserAction to create the post originally).</para>
        /// <para>action_links (array): An array containing the text and URL for each action link.</para>
        /// </summary>
        [Column(Name = "app_data")]
        public Collection<dynamic> AppData { get; set; }

        /// <summary>
        /// An array containing the text and URL for each action link.
        /// </summary>
        [Column(Name = "action_links")]
        public Collection<dynamic> ActionLinks { get; set; }

        /// <summary>
        /// An array of information about the attachment to the post. This is the attachment that Facebook returns.
        /// </summary>
        [Column(Name = "attachment")]
        public Collection<dynamic> Attachment { get; set; }

        /// <summary>
        /// Number of impressions of this post. This data is visible only if the you have read_insights extended permission of any of the page owners.
        /// </summary>
        [Column(Name = "impressions")]
        public int Impressions { get; set; }

        /// <summary>
        /// A sample array of comments added to a post. This list contains up to two comments to display along with stream content. To get the full list of comments, use stream.getComments or query the comment FQL table using the post_id of this post.  The array contains the following fields:
        /// <para>can_remove (bool): Indicates whether users can remove comments.</para>
        /// <para>can_post (bool): Indicates whether users can post comments.</para>
        /// <para>count (i32): The total number of comments added to the post.</para>
        /// <para>comment_list (array): A list of comment-type comments for this post. Comments are formatted as they would be when returned by the comment (FQL) table.</para>
        /// </summary>
        [Column(Name = "comments")]
        public Collection<dynamic> Comments { get; set; }

        /// <summary>
        /// An array of likes associated with the post. The array contains the following fields:
        /// <para>href (string): The URL to a page showing the other users who've liked this post.</para>
        /// <para>count (i32): The total number of times users like the post.</para>
        /// <para>sample (array): A sample of users who like the post.</para>
        /// <para>friends (array): A list of the viewing user's friends who like the post.</para>
        /// <para>user_likes (bool): Indicates whether the viewing user likes the post.</para>
        /// <para>can_like (bool): Indicates whether the post can be liked.</para>
        /// </summary>
        [Column(Name = "likes")]
        public Collection<dynamic> Likes { get; set; }

        /// <summary>
        /// The privacy setting for a post, indicating which of a user's friends or others can see the content.
        /// </summary>
        [Column(Name = "privacy")]
        public Collection<dynamic> Privacy { get; set; }

        /// <summary>
        /// Do not use this field as it's been deprecated. To determine what sort of post gets returned, look for the presence of an attachment (lack of an attachment indicates a status update), and if one is present, look at the attachment's media type (photo, Flash, mp3) to determine how you want to handle the post. Facebook for Adobe AIR uses this method, for example.
        /// </summary>
        [Column(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// A link to the stream post.
        /// </summary>
        [Column(Name = "permalink")]
        public string Permalink { get; set; }

        /// <summary>
        /// When querying for the feed of a live stream box, this is the xid associated with the Live Stream box (you can provide 'default' if one is not available).
        /// </summary>
        [Column(Name = "xid")]
        public int Xid { get; set; }

        /// <summary>
        /// An array of IDs (i64) tagged in the message of the post.
        /// </summary>
        [Column(Name = "tagged_ids")]
        public Collection<dynamic> TaggedIds { get; set; }

    }

    [Table(Name = "stream_filter")]
    public partial class FqlStreamFilter
    {

        /// <summary>
        /// The ID of the user whose filters you are querying.
        /// </summary>
        [Column(Name = "uid")]
        public string Uid { get; set; }

        /// <summary>
        /// A key identifying a particular filter for a user's stream. This filter is useful to retrieve relevant items from the stream table.
        /// </summary>
        [Column(Name = "filter_key")]
        public string FilterKey { get; set; }

        /// <summary>
        /// The name of the filter as it appears on the home page.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// A 32-bit int that indicates where the filter appears in the sort.
        /// </summary>
        [Column(Name = "rank")]
        public int Rank { get; set; }

        /// <summary>
        /// The URL to the filter icon. For applications, this is the same as your application icon.
        /// </summary>
        [Column(Name = "icon_url")]
        public string IconUrl { get; set; }

        /// <summary>
        /// If true, indicates that the filter is visible on the home page. If false, the filter is hidden in the More link.
        /// </summary>
        [Column(Name = "is_visible")]
        public bool IsVisible { get; set; }

        /// <summary>
        /// The type of filter. One of application, newsfeed, friendlist, network, or publicprofile.
        /// </summary>
        [Column(Name = "type")]
        public string Type { get; set; }

        /// <summary>
        /// A 64-bit ID for the filter type.
        /// </summary>
        [Column(Name = "value")]
        public int Value { get; set; }

    }

    [Table(Name = "stream_tag")]
    public partial class FqlStreamTag
    {

        /// <summary>
        /// The ID of a post from the user's or Page's stream. This field, when used as an index, is used to retrieve users and the entities they've tagged.
        /// </summary>
        [Column(Name = "post_id")]
        public string PostId { get; set; }

        /// <summary>
        /// The user ID of the user or Page who tagged one or more entities in a post. This field, when used as an index, is used to retrieve all the posts and the entities the user has tagged.
        /// </summary>
        [Column(Name = "actor_id")]
        public string ActorId { get; set; }

        /// <summary>
        /// The users, Pages, events, and other Facebook objects that have been tagged in one or more posts. This field, when used as an index, is used to retrieve all the entities that have been tagged in one or more posts.
        /// </summary>
        [Column(Name = "target_id")]
        public string TargetId { get; set; }

    }

    [Table(Name = "thread")]
    public partial class FqlThread
    {

        /// <summary>
        /// The ID of the thread being queried.
        /// </summary>
        [Column(Name = "thread_id")]
        public int ThreadId { get; set; }

        /// <summary>
        /// The ID of the folder that belongs to the thread you are querying. The ID can be one of: 0 (for Inbox), 1 (for Outbox), or 4 (for Updates).
        /// </summary>
        [Column(Name = "folder_id")]
        public int FolderId { get; set; }

        /// <summary>
        /// The subject of the thread.
        /// </summary>
        [Column(Name = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// The user IDs of the recipients of the thread.
        /// </summary>
        [Column(Name = "recipients")]
        public Collection<dynamic> Recipients { get; set; }

        /// <summary>
        /// The created_time of the most recent message in the thread.
        /// </summary>
        [Column(Name = "updated_time")]
        public int UpdatedTime { get; set; }

        /// <summary>
        /// The ID of the message from which this thread was branched, or 0 if this thread is not a branch. The parent_message_id is a concatenation of the thread ID and the message ID, joined by an underscore.
        /// </summary>
        [Column(Name = "parent_message_id")]
        public string ParentMessageId { get; set; }

        /// <summary>
        /// The ID of the thread from which this thread was branched, or 0 if this thread is not a branch.
        /// </summary>
        [Column(Name = "parent_thread_id")]
        public int ParentThreadId { get; set; }

        /// <summary>
        /// The number of messages in this thread.
        /// </summary>
        [Column(Name = "message_count")]
        public int MessageCount { get; set; }

        /// <summary>
        /// A short bit of text from the most recent message.
        /// </summary>
        [Column(Name = "snippet")]
        public string Snippet { get; set; }

        /// <summary>
        /// The user ID of the author of the snippet.
        /// </summary>
        [Column(Name = "snippet_author")]
        public int SnippetAuthor { get; set; }

        /// <summary>
        /// The object that sent this message, or 0 if it was not sent by an object. You can get more information about this object in the profile table.
        /// </summary>
        [Column(Name = "object_id")]
        public int ObjectId { get; set; }

        /// <summary>
        /// This is 0 if the message is read, and it is higher than that if there are unread messages in the thread.
        /// </summary>
        [Column(Name = "unread")]
        public int Unread { get; set; }

        /// <summary>
        /// The ID of the user whose Inbox you are querying.
        /// </summary>
        [Column(Name = "viewer_id")]
        public int ViewerId { get; set; }

    }

    [Table(Name = "translation")]
    public partial class FqlTranslation
    {

        /// <summary>
        /// The locale for the translations for which you are querying. See Facebook Locales for the list of currently supported locales. You must specify a single locale in your query.
        /// </summary>
        [Column(Name = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// A hash of the native string and a description generated by the Translations application. It's a unique identifier for the string. The hash is generated by hashing the concatenation of the string followed by 3 colons, followed by the description, followed by a colon, using the tiger128,3 hashing algorithm. Query on this column to quickly return your application's native strings and their descriptions.
        /// </summary>
        [Column(Name = "native_hash")]
        public string NativeHash { get; set; }

        /// <summary>
        /// The actual text from your application you previously submitted for translation to the Translations application.
        /// </summary>
        [Column(Name = "native_string")]
        public string NativeString { get; set; }

        /// <summary>
        /// The description of the native string needing translation. This text clarifies the context in which the text is used, and the meaning if it is ambiguous. This is shown to translators in the bulk translation user interface, among other places, and should describe the text well enough that someone can translate it without seeing it in the context of your application. In general a piece of text should always have a description unless it is a complete sentence whose meaning would be clear to a user who has never seen your application. If a description for the corresponding string or hash doesn't exist in the Translations database, this column returns null.
        /// </summary>
        [Column(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// The translation of the native string. If a translation for the corresponding string or hash doesn't exist in the Translations database, this column returns null.
        /// </summary>
        [Column(Name = "translation")]
        public string Value { get; set; }

        /// <summary>
        /// The approval status of the string. The status is one of:
        /// <para>auto-approved: Automatically approved by our system, based on votes.</para>
        /// <para>approved: Manually approved by you, another developer of your application, or an authorized translator.</para>
        /// <para>unapproved: Not approved in any manner.</para>
        /// </summary>
        [Column(Name = "approval_status")]
        public string ApprovalStatus { get; set; }

        /// <summary>
        /// A concatenation of the native string and its description. This string is used to generate the native hash. The native string is concatenated with 3 colons, the description, then another colon. Query on this column if you want to check whether a random string and description exists. A query containing the pre_hash_string runs more slowly than a query containing the native_hash.
        /// </summary>
        [Column(Name = "pre_hash_string")]
        public string PreHashString { get; set; }

        /// <summary>
        /// The translated string that gets displayed to a user translating your application. The user must be browsing Facebook in the locale of the approved translation. Querying on this column returns either a native string or translated string.  If no entry for the corresponding native string exists in the Translations database, this column returns null.
        /// </summary>
        [Column(Name = "best_string")]
        public string BestString { get; set; }

    }

    [Table(Name = "user")]
    public partial class FqlUser
    {

        /// <summary>
        /// The user ID of the user being queried.
        /// </summary>
        [Column(Name = "uid")]
        public int Uid { get; set; }

        /// <summary>
        /// The first name of the user being queried.
        /// </summary>
        [Column(Name = "first_name")]
        public string FirstName { get; set; }

        /// <summary>
        /// The middle name of the user being queried.
        /// </summary>
        [Column(Name = "middle_name")]
        public string MiddleName { get; set; }

        /// <summary>
        /// The last name of the user being queried.
        /// </summary>
        [Column(Name = "last_name")]
        public string LastName { get; set; }

        /// <summary>
        /// The full name of the user being queried.
        /// </summary>
        [Column(Name = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The URL to the small-sized profile picture for the user being queried. The image can have a maximum width of 50px and a maximum height of 150px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_small")]
        public string PicSmall { get; set; }

        /// <summary>
        /// The URL to the largest-sized profile picture for the user being queried. The image can have a maximum width of 200px and a maximum height of 600px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_big")]
        public string PicBig { get; set; }

        /// <summary>
        /// The URL to the square profile picture for the user being queried. The image can have a maximum width and height of 50px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_square")]
        public string PicSquare { get; set; }

        /// <summary>
        /// The URL to the medium-sized profile picture for the user being queried. The image can have a maximum width of 100px and a maximum height of 300px. This URL may be blank.
        /// </summary>
        [Column(Name = "pic")]
        public string Pic { get; set; }

        /// <summary>
        /// The networks to which the user being queried belongs. The status field within this field will only return results in English.
        /// </summary>
        [Column(Name = "affiliations")]
        public Collection<dynamic> Affiliations { get; set; }

        /// <summary>
        /// The time the profile of the user being queried was most recently updated. If the user's profile has not been updated in the past three days, this value will be 0.
        /// </summary>
        [Column(Name = "profile_update_time")]
        public DateTime ProfileUpdateTime { get; set; }

        /// <summary>
        /// The time zone where the user being queried is located.
        /// </summary>
        [Column(Name = "timezone")]
        public string Timezone { get; set; }

        /// <summary>
        /// The religion of the user being queried.
        /// </summary>
        [Column(Name = "religion")]
        public string Religion { get; set; }

        /// <summary>
        /// The birthday of the user being queried. The format of this date varies based on the user's locale.
        /// </summary>
        [Column(Name = "birthday")]
        public string Birthday { get; set; }

        /// <summary>
        /// The birthday of the user being queried, rendered as a machine-readable string. The format of this date never changes.
        /// </summary>
        [Column(Name = "birthday_date")]
        public string BirthdayDate { get; set; }

        /// <summary>
        /// The gender of the user being queried. This field will only return results in English.
        /// </summary>
        [Column(Name = "sex")]
        public string Sex { get; set; }

        /// <summary>
        /// The home town (and state) of the user being queried.
        /// </summary>
        [Column(Name = "hometown_location")]
        public Collection<dynamic> HometownLocation { get; set; }

        /// <summary>
        /// A list of the genders the person the user being queried wants to meet.
        /// </summary>
        [Column(Name = "meeting_sex")]
        public Collection<dynamic> MeetingSex { get; set; }

        /// <summary>
        /// A list of the reasons the user being queried wants to meet someone.
        /// </summary>
        [Column(Name = "meeting_for")]
        public Collection<dynamic> MeetingFor { get; set; }

        /// <summary>
        /// The type of relationship for the user being queried. This field will only return results in English.
        /// </summary>
        [Column(Name = "relationship_status")]
        public string RelationshipStatus { get; set; }

        /// <summary>
        /// The user ID of the partner (for example, husband, wife, boyfriend, girlfriend) of the user being queried.
        /// </summary>
        [Column(Name = "significant_other_id")]
        public long SignificantOtherId { get; set; }

        /// <summary>
        /// The political views of the user being queried.
        /// </summary>
        [Column(Name = "political")]
        public string Political { get; set; }

        /// <summary>
        /// The current location of the user being queried.
        /// </summary>
        [Column(Name = "current_location")]
        public Collection<dynamic> CurrentLocation { get; set; }

        /// <summary>
        /// The activities of the user being queried.
        /// </summary>
        [Column(Name = "activities")]
        public string Activities { get; set; }

        /// <summary>
        /// The interests of the user being queried.
        /// </summary>
        [Column(Name = "interests")]
        public string Interests { get; set; }

        /// <summary>
        /// Indicates whether the user being queried has logged in to the current application.
        /// </summary>
        [Column(Name = "is_app_user")]
        public bool IsAppUser { get; set; }

        /// <summary>
        /// The favorite music of the user being queried.
        /// </summary>
        [Column(Name = "music")]
        public string Music { get; set; }

        /// <summary>
        /// The favorite television shows of the user being queried.
        /// </summary>
        [Column(Name = "tv")]
        public string Tv { get; set; }

        /// <summary>
        /// The favorite movies of the user being queried.
        /// </summary>
        [Column(Name = "movies")]
        public string Movies { get; set; }

        /// <summary>
        /// The favorite books of the user being queried.
        /// </summary>
        [Column(Name = "books")]
        public string Books { get; set; }

        /// <summary>
        /// The favorite quotes of the user being queried.
        /// </summary>
        [Column(Name = "quotes")]
        public string Quotes { get; set; }

        /// <summary>
        /// More information about the user being queried.
        /// </summary>
        [Column(Name = "about_me")]
        public string AboutMe { get; set; }

        /// <summary>
        /// Information about high school of the user being queried.
        /// </summary>
        [Column(Name = "hs_info")]
        public Collection<dynamic> HsInfo { get; set; }

        /// <summary>
        /// Post-high school information for the user being queried.
        /// </summary>
        [Column(Name = "education_history")]
        public Collection<dynamic> EducationHistory { get; set; }

        /// <summary>
        /// The work history of the user being queried.
        /// </summary>
        [Column(Name = "work_history")]
        public Collection<dynamic> WorkHistory { get; set; }

        /// <summary>
        /// The number of notes created by the user being queried.
        /// </summary>
        [Column(Name = "notes_count")]
        public int NotesCount { get; set; }

        /// <summary>
        /// The number of Wall posts for the user being queried.
        /// </summary>
        [Column(Name = "wall_count")]
        public int WallCount { get; set; }

        /// <summary>
        /// The current status of the user being queried.
        /// </summary>
        [Column(Name = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Deprecated. This value is now equivalent to is_app_user.
        /// </summary>
        [Column(Name = "has_added_app")]
        public bool HasAddedApp { get; set; }

        /// <summary>
        /// The user's Facebook Chat status. Returns a string, one of active, idle, offline, or error (when Facebook can't determine presence information on the server side). The query does not return the user's Facebook Chat status when that information is restricted for privacy reasons.
        /// </summary>
        [Column(Name = "online_presence")]
        public string OnlinePresence { get; set; }

        /// <summary>
        /// The two-letter language code and the two-letter country code representing the user's locale. Country codes are taken from the ISO 3166 alpha 2 code list.
        /// </summary>
        [Column(Name = "locale")]
        public string Locale { get; set; }

        /// <summary>
        /// The proxied wrapper for a user's email address. If the user shared a proxied email address instead of his or her primary email address with you, this address also appears in the email field (see above). Facebook recommends you query the email field to get the email address shared with your application.
        /// </summary>
        [Column(Name = "proxied_email")]
        public string ProxiedEmail { get; set; }

        /// <summary>
        /// The URL to a user's profile. If the user specified a username for his or her profile, profile_url contains the username.
        /// </summary>
        [Column(Name = "profile_url")]
        public string ProfileUrl { get; set; }

        /// <summary>
        /// An array containing a set of confirmed email hashes for the user. Emails are registered via the connect.registerUsers API call and are only confirmed when the user adds your application. The format of each email hash is the crc32 and md5 hashes of the email address combined with an underscore (_).
        /// </summary>
        [Column(Name = "email_hashes")]
        public Collection<dynamic> EmailHashes { get; set; }

        /// <summary>
        /// The URL to the small-sized profile picture for the user being queried. The image can have a maximum width of 50px and a maximum height of 150px, and is overlaid with the Facebook favicon. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_small_with_logo")]
        public string PicSmallWithLogo { get; set; }

        /// <summary>
        /// The URL to the largest-sized profile picture for the user being queried. The image can have a maximum width of 200px and a maximum height of 600px, and is overlaid with the Facebook favicon. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_big_with_logo")]
        public string PicBigWithLogo { get; set; }

        /// <summary>
        /// The URL to the square profile picture for the user being queried. The image can have a maximum width and height of 50px, and is overlaid with the Facebook favicon. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_square_with_logo")]
        public string PicSquareWithLogo { get; set; }

        /// <summary>
        /// The URL to the medium-sized profile picture for the user being queried. The image can have a maximum width of 100px and a maximum height of 300px, and is overlaid with the Facebook favicon. This URL may be blank.
        /// </summary>
        [Column(Name = "pic_with_logo")]
        public string PicWithLogo { get; set; }

        /// <summary>
        /// A comma-delimited list of Demographic Restrictions types a user is allowed to access. Currently, alcohol is the only type that can get returned.
        /// </summary>
        [Column(Name = "allowed_restrictions")]
        public string AllowedRestrictions { get; set; }

        /// <summary>
        /// Indicates whether or not Facebook has verified the user.
        /// </summary>
        [Column(Name = "verified")]
        public bool Verified { get; set; }

        /// <summary>
        /// This string contains the contents of the text box under a user's profile picture.
        /// </summary>
        [Column(Name = "profile_blurb")]
        public string ProfileBlurb { get; set; }

        /// <summary>
        /// Note: For family information, you should query the family FQL table instead.
        /// <para>This array contains a series of entries for the immediate relatives of the user being queried. Each entry is also an array containing the following fields:</para>
        /// <para>relationship -- A string describing the type of relationship. Can be one of parent, mother, father, sibling, sister, brother, child, son, daughter.</para>
        /// <para>uid (optional) -- The user ID of the relative, which gets displayed if the account is linked to (confirmed by) another account. If the relative did not confirm the relationship, the name appears instead.</para>
        /// <para>name (optional) -- The name of the relative, which could be text the user entered. If the relative confirmed the relationship, the uid appears instead.</para>
        /// <para>birthday -- If the relative is a child, this is the birthday the user entered.</para>
        /// <para>Note: At this time, you cannot query for a specific relationship (like SELECT family FROM user WHERE family.relationship = 'daughter' AND uid = '$x'); you'll have to query on the family field and filter the results yourself.</para>
        /// </summary>
        [Column(Name = "family")]
        public Collection<dynamic> Family { get; set; }

        /// <summary>
        /// The username of the user being queried.
        /// </summary>
        [Column(Name = "username")]
        public string Username { get; set; }

        /// <summary>
        /// The website of the user being queried.
        /// </summary>
        [Column(Name = "website")]
        public string Website { get; set; }

        /// <summary>
        /// Returns true if the user is blocked to the viewer/logged in user.
        /// </summary>
        [Column(Name = "is_blocked")]
        public bool IsBlocked { get; set; }

        /// <summary>
        /// A string containing the user's primary Facebook email address. If the user shared his or her primary email address with you, this address also appears in the email field (see below). Facebook recommends you query the email field to get the email address shared with your application.
        /// </summary>
        [Column(Name = "contact_email")]
        public string ContactEmail { get; set; }

        /// <summary>
        /// A string containing the user's primary Facebook email address or the user's proxied email address, whichever address the user granted your application. Facebook recommends you query this field to get the email address shared with your application.
        /// </summary>
        [Column(Name = "email")]
        public string Email { get; set; }

        /// <summary>
        /// A string containing an anonymous, but unique identifier for the user.  You can use this identifier with third-parties.
        /// </summary>
        [Column(Name = "third_party_id")]
        public string ThirdPartyId { get; set; }

    }

    [Table(Name = "video")]
    public partial class FqlVideo
    {

        /// <summary>
        /// The ID of the video being queried. The vid cannot be longer than 50 characters.Note: Because the vid is a string, you should always wrap the vid in quotes when referenced in a query. The vid is unique only for a given user. You can use the vid as an object ID in the Graph API.
        /// </summary>
        [Column(Name = "vid")]
        public string Vid { get; set; }

        /// <summary>
        /// The user ID of the owner of the video being queried.
        /// </summary>
        [Column(Name = "owner")]
        public int Owner { get; set; }

        /// <summary>
        /// The name of the video being queried.
        /// </summary>
        [Column(Name = "title")]
        public string Title { get; set; }

        /// <summary>
        /// The description of the video being queried.
        /// </summary>
        [Column(Name = "description")]
        public string Description { get; set; }

        /// <summary>
        /// The URL to the thumbnail image for the video being queried. This URL may be blank.
        /// </summary>
        [Column(Name = "thumbnail_link")]
        public string ThumbnailLink { get; set; }

        /// <summary>
        /// The HTML code to embed the video.
        /// </summary>
        [Column(Name = "embed_html")]
        public string EmbedHtml { get; set; }

        /// <summary>
        /// The date when the video being queried was last modified.
        /// </summary>
        [Column(Name = "updated_time")]
        public DateTime UpdatedTime { get; set; }

        /// <summary>
        /// The date when the video being queried was added.
        /// </summary>
        [Column(Name = "created_time")]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// The source file for the standard quality version of the video.
        /// </summary>
        [Column(Name = "src")]
        public string Src { get; set; }

        /// <summary>
        /// The source file for the high quality version of the video.
        /// </summary>
        [Column(Name = "src_hq")]
        public string SrcHq { get; set; }

    }

    [Table(Name = "video_tag")]
    public partial class FqlVideoTag
    {

        /// <summary>
        /// The ID of the video being queried. The vid cannot be longer than 50 characters.Note: Because the vid is a string, you should always wrap the vid in quotes when referenced in a query.
        /// </summary>
        [Column(Name = "vid")]
        public string Vid { get; set; }

        /// <summary>
        /// For tagged users, use the user ID of the subject for the tag being queried. For videos associated with events or groups, use the eid or gid for subject.
        /// </summary>
        [Column(Name = "subject")]
        public int Subject { get; set; }

        /// <summary>
        /// The date when the video being queried was last modified.
        /// </summary>
        [Column(Name = "updated_time")]
        public DateTime UpdatedTime { get; set; }

        /// <summary>
        /// The date when the video being queried was added.
        /// </summary>
        [Column(Name = "created_time")]
        public DateTime CreatedTime { get; set; }

    }


}


